~~~NOTES
-axios is a library to communicate between browser and server
-fetch is also nice to use; promise based function to pull data from server

~~~Promises
A Promise is an object representing the eventual completion or failure of an asynchronous operation.

In other words, a promise is an object that represents an asynchronous operation. A promise can have three distinct states:

The promise is pending: It means that the final value (one of the following two) is not available yet.
The promise is fulfilled: It means that the operation has been completed and the final value is available, which generally is a successful operation. This state is sometimes also called resolved.
The promise is rejected: It means that an error prevented the final value from being determined, which generally represents a failed operation.

~~~ Effect Hook
The Effect Hook lets you perform side effects on function components. 
Data fetching, setting up a subscription, and manually changing the DOM in React 
components are all examples of side effects.
- two parameters:
    - first: function/effect itself: run after every completed render
        - can choose to fire it only when certain values have changed
    - second: array of dependencies in which effect hook should run if change
        - [] implies effect only executed when component is rendered for first time

~~~ object
export default { getAll, create, update }
is the same as { 
        getAll: getAll, 
        create: create, 
        update: update 
    }

~~~ Rendering forms conditionally using React trick
- {user === null && loginForm()}
- If the first statement evaluates to false, or is falsy, the second statement 
    (generating the form) is not executed at all.
- ternary operator can also be used

~~~ Local storage
- save user's login credentials to local sstorage
- local storage is a key-value db in browser
- use setItem method to save key-value to database
    - e.g. window.localStorage.setItem('name', 'juha tauriainen')
        - first parameter is key
        - second parameter is value
- use getItem to get value of a key
- use removeItem to remove a key
- values saved to storage are DOMstrings
    - parse to JSON first via JSON.stringify and then parse back with JSON.parse
- logging out:
    - use window.localStorage.removeItem('loggedNoteappUser') to get rid of specific user
    - or use window.localStorage.clear() to empty localstorage completely

~~~Child components
- parent component has both opening and closing tags which surround a child component
- can add any React element between opening and closing tags of parent component
- access using props.children
    - React automatically adds props.children and it always exists
    - if component is defined with automatically closing tag (e.g. <Note />),
        then props.children is empty array

~~~
const noteForm = () => ( // parentheses denote grouping of multiline code 
  // so semicolon is not inserted into wrong place
    <Togglable buttonLabel='new note'>
      <NoteForm createNote={addNote} />
    </Togglable>
)

~~~ References to components with ref
- useRef hook creates reference assigned to a component
    - ensures same references is kept throughout re-renders of component
- forwardRef function call wraps function that creates component
- useImperativeHandle hook makes toggleVisibility function available
    outside of component
        - noteFormRef.current.toggleVisibility() called outside of component
            (e.g. in App.js) toggles visibility

~~~ Testing react apps
- Rendering component for tests
    - npm install --save-dev @testing-library/react @testing-library/jest-dom
- create test file in same directory as component being tested
- render(<Note note={note} />)
- use object screen to access rendered component
    - const element = screen.getByText('text')
    - expect(element).toBeDefined() // unnecessary since test would fail 
        if element is not defined anyways

~~~ Debugging tests
- screen.debug() prints HTML of component to terminal
    - parameter can also specify HTML of wanted element
        - e.g. screen.debug(element)

~~~ Simulating button clicks
- e.g. clicking a button
- npm install --save-dev @testing-library/user-event
- mock functions: test links between code by erasing actual implementation 
    of a function, capturing calls to function + parameters, capturing
    instances of constructor functions when instantiated with "new",
    and allowing test-time configuratino of return values
    - create with jest.fn()

~~~ Simulating text input for forms
- getByRole function allows access to input field
- "type" method of userEvent used to write text to input field
    - e.g. 
        import React from 'react'
        import { render, screen } from '@testing-library/react'
        import '@testing-library/jest-dom/extend-expect'
        import NoteForm from './NoteForm'
        import userEvent from '@testing-library/user-event'

        test('<NoteForm /> updates parent state and calls onSubmit', async () => {
            const createNote = jest.fn()
            const user = userEvent.setup()

            render(<NoteForm createNote={createNote} />)

            const input = screen.getByRole('textbox')
            const sendButton = screen.getByText('save')

            await user.type(input, 'testing a form...' )
            await user.click(sendButton)

            expect(createNote.mock.calls).toHaveLength(1)
            expect(createNote.mock.calls[0][0].content).toBe('testing a form...' )
        })
- getByRole function fails if multiple input/textboxes present
    - solutions:
    - 1. use getAllByRole and specify input[index position] according to order of input textboxes
    - 2. specify placeholder attribute in input element
        - then use screen.getByPlaceholderText(...)
    - 3. use querySelector method of container object that's returned by render method

~~~ End-to-end testing (E2E)
- Cypress library
    - tests are run completely within browser
    - others might run tests in a Node process which is connected to browser
        through an API
    - tests can be in frontend, backend, or in separate repo
        - unlike frontend's unit tests
    - npm install --save-dev cypress
    - "cypress:open": "cypress open" npm script in frontend
    - "start:test": "cross-env NODE_ENV=test node index.js" npm script to backend
    - npm run cypress open
        - creates cypress directory
            - contains integration subdirectory where tests are placeholder
            - example tests created in subdirectories in integration
    - uses Mocha testing library under the hood
    - "describe" blocks to group different test cases
    - individual test cases defined with "it" method
    - arrow functions are not recommended since Mocha testing library
- Writing to a form:
    - cy.get command allows for searching elements with CSS selectors
    - cy.type command allows for writing
- note that each test starts from zero as far as browser is concerned
    - all changes to browser's state are reversed after each test
    - so, beforeEach block login is needed

~~~ Controlling state of the database in Cypress
- create API endpoints for backend to test first so that db can be emptied
    using the endpoints
    - create new router for tests
    - add to backend only if app is run on test-mode
    - e.g. backend:
        - router
        const testingRouter = require('express').Router()
        const Note = require('../models/note')
        const User = require('../models/user')

        testingRouter.post('/reset', async (request, response) => {
        await Note.deleteMany({})
        await User.deleteMany({})

        response.status(204).end()
        })

        module.exports = testingRouter
        
        - app.js
        if (process.env.NODE_ENV === 'test') {
            const testingRouter = require('./controllers/testing')
            app.use('/api/testing', testingRouter)
        }

- cy.request method for making HTTP requests to backend

~~~ Individual testing in Cypress
- it.only instead of it.

~~~ Other Cypress notes
- .should method for broader coverage of testing
    - e.g. 
        it('login fails with wrong password', function() {
            // ...

            cy.get('.error').should('contain', 'wrong credentials') 
            cy.get('.error').should('have.css', 'color', 'rgb(255, 0, 0)')
            cy.get('.error').should('have.css', 'border-style', 'solid')
        })
- .and method for chaining multiple .get methods for same component
    - e.g.
        it('login fails with wrong password', function() {
            // ...

            cy.get('.error')
                .should('contain', 'wrong credentials')
                .and('have.css', 'color', 'rgb(255, 0, 0)')
                .and('have.css', 'border-style', 'solid')
        })
- cy.get('html') allows access to whole visible content of application
- .contains command chains:
    - subsequent .contain methods search for element within the component found
        by previous .contain method
    - use .find instead of .get after multiple .contain calls since .get
        would search whole page but .find is restricted to area that .contain
            found
    - can also "remember" an element using .as command
        - e.g. 
        it('one of those can be made important', function () {
            cy.contains('second note').parent().find('button').as('theButton')
            cy.get('@theButton').click()
            cy.get('@theButton').should('contain', 'make not important')
        })
- Cypress commands are like promises -> use .then() commands to access
    return values
- you can run Cypress tests from command line via npm run cypress run command
    - npm script: "test:e2e": "cypress run"
        - npm run test:e2e

~~~ Bypassing the UI w/ Cypress
- Cypress docs recommend fully testing login flow only once
- for other tests, just bypass the UI using HTTP request instead of having the
    beforeEach block
- create custom command for login in cypress/support/commands.js

~~~ Custom commands in Cypress
- declare in cypress/support/commands.js

~~~COMMANDS
npm install axios
-installs axios as a runtime dependency of application
(i.e. execution of program requires existence of the axios library)

npm install json-server --save-dev
-installs json-server as a development dependency
-program itself doesn't require it
-run at root of application

npm run server
-run this after previous command and adding to "scripts" part in package.json
"server": "json-server -p3001 --watch db.json"
p3001 is because p3000 is usually taken (e.g. by create-react-app)
-run at root of application