rm -rf .git
- removes git repo created at root directory

Modules
- Node.js uses CommonJS modules that are used via statements like
    - const http = require('http')
- code that runs in browser use ES6 modules (import, export statements)

~~~ Setting up server and handling requests
const app = http.createServer((request, response) => {
  response.writeHead(200, { 'Content-Type': 'text/plain' })
  response.end('Hello World')
})
// event handler applied to createServer is called every time an HTTP request
// is made to server's address http://localhost:3001.
// request responded to with status code 200 w/ Content-Type header set to text/plain
// content of site to be returned is set to Hello World

const PORT = 3001
app.listen(PORT)
console.log(`Server running on port ${PORT}`)
// http server binded to app variable to listen to HTTP requests sent to port 3001

// handle all HTTP GET requests of form /api/notes/SOMETHING
  // something is arbitary string
  app.get('/api/notes/:id', (request, response) => {
    const id = request.params.id
    const note = notes.find(note => note.id === id)
    response.json(note)
  })

response.status(404).end()
- status method sets status to 404
- end method responds to request without sending any data

~~~ Dependencies
"dependencies": {
    "express": "^4.18.1"
}
- format: major/minor/patch
- caret means that  if and when the dependencies of a project are updated, 
the version of express that is installed will be at least 4.18.1,
but install version of express can also be one that has a larger patch or minor
number; major number is same

~~~ JSON
- JSON is a string, not a JavaScript object
- '{"name": "Arto", "age": 35}' vs. { name: 'Arto', age: 35}

~~~ Nodemon
npm install --save-dev nodemon
- install as development dependency
- start app: node_modules/.bin/nodemon index.js
- shorthand for starting app:
    - first define "dev": "nodemon index.js" in scripts as npm script
    - then use npm run dev command

~~~ Middleware
- functions that can be used for handling request and response objects
const requestLogger = (request, response, next) => {
  console.log('Method:', request.method)
  console.log('Path:  ', request.path)
  console.log('Body:  ', request.body)
  console.log('---')
  next()
}
- error handlers: middlware defined with a function that accepts four parameters
- execution order of middleware is the same as order they are loaded into express
w/ app.use function
-app.use(express.json()) aka json-parser should be first middleware loaded
- At the end of the function body the "next" function that was passed as a 
parameter is called. The "next" function yields control to the next middleware

Code:
const errorHandler = (error, request, response, next) => {
  console.error(error.message)

  if (error.name === 'CastError') {
    return response.status(400).send({ error: 'malformatted id' })
  }
  - CastError implies error was caused by invalid object id for Mongo

  next(error)
}

// this has to be the last loaded middleware.
app.use(errorHandler)

app.use(requestLogger)

~~~ CORS - Cross-origin resource sharing
- restricted for security reasons
- basically, cannot communicate requests of app running in browser
of one origin to a server of different origin
- use Node's cors middleware to allow access to different origins

~~~ Deploy database backend to production
heroku config:set MONGODB_URI="mongodb+srv://felixhuang12:Flyingstar123@cluster0.ffjo3.mongodb.net/phonebook?retryWrites=true&w=majority"
- MAKE SURE TO SET NETWORK ACCESS TO DB FROM ANYWHERE IN MONGODB

~~~ Serving static files from backend
- one option for deploying frontend is to copy production build to root of
  backend repo and configure backend to show frontend's main page (build/index.html)
- backend requires express to show static content (index.html + JS) -> middleware needed
  - app.use(express.static('build'))
- result:
  - whenever express gets an HTTP GET request it will first check if the build 
    directory contains a file corresponding to the request's address. If a 
    correct file is found, express will return it.
  - Now HTTP GET requests to the address www.serversaddress.com/index.html or 
    www.serversaddress.com will show the React frontend. GET requests to the 
    address www.serversaddress.com/api/notes will be handled by the backend's 
    code.
  - Because of our situation, both the frontend and the backend are at the same 
    address, we can declare baseUrl as a relative URL. This means we can leave 
    out the part declaring the server.

~~~ Lint
- any tool that detects and flags errors in programming languages, including stylistic errors
- lint-like behavior sometimes applied to process of flagging suspicious language usage
- lint-like tools generally perform static analysis of source code

~~~ Router object
- isolated instance of middleware and routes
- "mini-application" that can only perform middleware and routing functions
- every Express app has a built-in router

                          ~~~ New structure of project
- controllers -> directory where event handlers of routes are (notes.js)
  - almost identical to previous index.js file except urls are changed to be 
    relative to /api/notes and separate router object is created
- logger.js streamlines printing of log and error messages
- index.js only responsibility is to import actual app from app.js and start it
- config.js handles environment variables
  - other parts of app can access environment variables by importing
    - e.g.: const config = require('./utils/config')
            logger.info(`Server running on port ${config.PORT}`)
- middleware.js contains all custom middleware
- app.js establishes connection database
- note.js changed to only handle definition of Mongoose schema
  - connection to db given to app.js

~~~ Unit testing
- jest tool created by Facebook
- install as development dependency
- testing specific notes:
  - npm test -- tests/note_api.test.js
    - runs tests only found in note_api.test.js
  - npm run test -- -t "a specific note is within the returned notes"
    - runs tests found with that specific name
  - npm test -- -t 'notes'
    - runs all tests found with 'notes' in their name

~~~ Integration testing: testing the backend
- package.json:
  - NODE_ENV environment variable definitions in production mode
    - before, environment variables loaded in development in .env file
  - runInBand option to test script prevents jest from running tests in parallel
  - cross-env enables app to work in Windows
    - use npm i cross-env -P when deploying to Heroku so it is defined for production
- creation of locally stored test database:
  - running Mongo in-memory or use Docker containers
  - for sake of simplicity, MongoDB Atlas database used for test
- supertest package: development dependency
  - tests API
  - takes care that the app being tested is started at port it uses internally
    - so need to configure port manually in app.js (fine to leave in index.js)

~~~ RegEx expressions
- \ indicates following character is special

~~~ async/await
- alternative to promises
- makes code cleaner
- async declares a function asynchronous
- await ensures that execution of code will stop temporarily until the code
  following the await keyword finishes
- error handling (since got rid of catch statement from promises):
  - try/catch mechanism:
    - e.g.
        notesRouter.post('/', async (request, response, next) => {
          const body = request.body

          const note = new Note({
            content: body.content,
            important: body.important || false,
            date: new Date(),
          })
          try {
            const savedNote = await note.save()
            response.status(201).json(savedNote)
          } catch(exception) {
            next(exception)
          }
        })
- if async loop is defined inside async function:
  - function will not wait for loop to finish since asynchronousity of loop
    does not belong to function
      - e.g. 
          beforeEach(async () => {
            await Note.deleteMany({})
            console.log('cleared')

            helper.initialNotes.forEach(async (note) => {
              let noteObject = new Note(note)
              await noteObject.save()
              console.log('saved')
            })
            console.log('done')
          })
  - fix:
    - wait for all asynchronous operations to finish with Promise.all method
      - e.g. 
          beforeEach(async () => {
            await Note.deleteMany({})

            const noteObjects = helper.initialNotes
              .map(note => new Note(note))
            const promiseArray = noteObjects.map(note => note.save())
            await Promise.all(promiseArray)
          })
      - Promise.all exceutes promises it receives in parallel
    - if specific order is needed, use a for...of block
      - e.g.
          beforeEach(async () => {
            await Note.deleteMany({})

            for (let note of helper.initialNotes) {
              let noteObject = new Note(note)
              await noteObject.save()
            }
          })


~~~ viewing notes during testing:
- need to convert object being viewed to JSON format
- JSON.parse(JSON.stringify(obj))
  - parse: converts JSON string into JSON format
  - stringify: converts JS object into JSON string

~~~ npm install express-async-errors
- used to eliminate catch from methods when refactoring code
- library handles everything under the hood:
  - if exception occurs in async route, the execution is automatically passed
    to error handling middleware

~~~ User administration
- relational databases:
  - id of users who create a document is stored in separate database as documents
    and id is stored as foreign key in database of documents
- document databases:
  - save id of users to separate collectino in same database
  - traditionally do not support JOIN queries available in relational databases
- Mongoose schema for users:
  - references to user in noteSchema
    - e.g.
        user: {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'User'
        }
  - references to notes in userSchema
- creating users:
  - password hash generation:
    - npm install bcrypt
  - comply with RESTful conventions by making HTTP post request to users path
- populate:
  - Mongoose's built "JOIN" query method
  - not transactional unlike in relational databases, meaning nothing can 
    guarantee that the state between the collections being joined is consistent,
    meaning that if we make a query that joins the user and notes collections, 
    the state of the collections may change during the query.
  - first parameter: document property that you want to replace with what it's
    referencing
      - e.g. 
          const users = await User
            .find({}).populate('notes')
          
          The parameter given to the populate method defines that the ids 
          referencing note objects in the notes field of the user document 
          will be replaced by the referenced note documents.
  - second parameter: selection of fields you want to include from documents
    (optional)
      - e.g. 
          usersRouter.get('/', async (request, response) => {
            const users = await User
              .find({}).populate('notes', { content: 1, date: 1 })

            response.json(users)
          });
  - The functionality of the populate method of Mongoose is based on the fact 
    that we have defined "types" to the references in the Mongoose schema with 
    the ref option

~~~ Token Authentication
Overview:
- User starts by logging in using a login form implemented with React
  - We will add the login form to the frontend in part 5
- This causes the React code to send the username and the password to the 
  server address /api/login as a HTTP POST request.
- If the username and the password are correct, the server generates a token 
  which somehow identifies the logged in user.
  - The token is signed digitally, making it impossible to falsify (with 
    cryptographic means)
- The backend responds with a status code indicating the operation was 
  successful, and returns the token with the response.
- The browser saves the token, for example to the state of a React application.
- When the user creates a new note (or does some other operation requiring 
  identification), the React code sends the token to the server with the request.
- The server uses the token to identify the user

- npm install jsonwebtoken
  - allows us to generate JSON web tokens

Verifying user:
- search user in db by username attached to login request
- check password attached to request
- use bcrypt.compare method to check if password is correct
- if user not found or password incorrect -> send 401 unauthorized response

Token generation: if password is correct
  - create token via jwt.sign method
    - token contains username and user id in digitally signed form
  - e.g. 
      const userForToken = {
        username: user.username,
        id: user._id,
      }

      const token = jwt.sign(userForToken, process.env.SECRET)
- digital signature ensures that only parties who know the secret can
  generate a valid token
    - SECRET must be set in .env file
      - can be any string

Sending token from browser to server:
- use Authorization header
- Bearer authorization scheme is suitable -> access to OAuth 2.0 protected 
  resources
- validity of token is checked with jwt.verify
  - method also decodes token -> returns Object which token was based on
    - decoded object contains username and id fields

~~~ PropTypes
- npm install prop-types
- define expected and required props of a component
- import and then after component put {nameOfComponent}.propTypes = {}
- e.g.
    LoginForm.propTypes = {
      handleSubmit: PropTypes.func.isRequired,
      handleUsernameChange: PropTypes.func.isRequired,
      handlePasswordChange: PropTypes.func.isRequired,
      username: PropTypes.string.isRequired,
      password: PropTypes.string.isRequired
    }